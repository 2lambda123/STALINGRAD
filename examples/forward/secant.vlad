;;; -*- Scheme -*-

(include "math")
(define error (lambda (x) (/ 1 0)))

;;; Use the secant method to find the zero of a 1D monotonic
;;; continuous function F in the region LO to HI to tolerance EPS.
;;; The function F must take negative and positive values at the left
;;; and right boundaries, respectively.

(define zero-via-secant
 (lambda (f lo hi eps)
  (letrec ((loop
	    (lambda (lo f-lo hi f-hi)
	     (let* ((lam (/ f-hi (- f-hi f-lo)))
		    (new (+ (* lam lo) (* (- 1.0 lam) hi)))
		    (f-new (f new)))
	      (if (<= (abs f-new) eps)
		  new
		  (if (< f-new 0)
		      (loop new f-new hi f-hi)
		      (loop lo f-lo new f-new)))))))
   (let ((f-lo (f lo))
	 (f-hi (f hi)))
    (cond ((>= f-lo 0) (error))
	  ((<= f-hi 0) (error))
	  (else (loop lo f-lo hi f-hi)))))))

;;; test

(define sqrt-via-secant
 (lambda (x eps)
  (zero-via-secant (lambda (y) (- (* y y) x))
		   0 (+ x 1) eps)))

;;; > (sqrt-via-secant 10.0 .00000000000001)
;;; 3.162277660168378
;;;
;;; > (- 10 (expt (sqrt-via-secant 10.0 .00000000000001) 2))
;;; 7.105427357601002e-15
