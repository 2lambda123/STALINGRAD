(include "math")

(define ((partial-derivative-using-j* f i) x)
 (adjoint ((j* f) (conjoint x (e i (length x))))))

(define ((partial-derivative-using-*j f i) x)
 (list-ref ((gradient-using-*j f) x) i))

(define (partial-derivative f i) (partial-derivative-using-j* f i))

(define ((hessian-using-j*-j* f) x)
 (let ((n (length x)))
  (map-n
   (lambda (i)
    (map-n
     (lambda (j)
      ((partial-derivative-using-j* (partial-derivative-using-j* f i) j) x))
     n))
   n)))

(define ((hessian-using-j*-*j f) x)
 (let ((n (length x)))
  (map-n
   (lambda (i)
    (map-n
     (lambda (j)
      ((partial-derivative-using-*j (partial-derivative-using-j* f i) j) x))
     n))
   n)))

(define ((hessian-using-*j-j* f) x)
 (let ((n (length x)))
  (map-n
   (lambda (i)
    (map-n
     (lambda (j)
      ((partial-derivative-using-j* (partial-derivative-using-*j f i) j) x))
     n))
   n)))

(define ((hessian-using-*j-*j f) x)
 (let ((n (length x)))
  (map-n
   (lambda (i)
    (map-n
     (lambda (j)
      ((partial-derivative-using-*j (partial-derivative-using-*j f i) j) x))
     n))
   n)))

(define (hessian f) (hessian-using-j*-j* f))

(define (hessian-quadratic-form-using-j*-j* f x u v)
 (let ((f-j* (j* f)))
  (adjoint
   ((j* (lambda (x) (adjoint (f-j* (conjoint x v))))) (conjoint x u)))))

(define (hessian-quadratic-form-using-j*-*j f x u v)
 (let ((f-*j (*j f)))
  (adjoint
   ((j* (lambda (x) (dot (ungenericize x (cdr ((cdr (f-*j x)) 1))) v)))
    (conjoint x u)))))

(define (hessian-quadratic-form-using-*j-j* f x u v)
 (let ((f-j* (j* f)))
  (dot
   u
   (ungenericize
    x
    (cdr ((cdr ((*j (lambda (x) (adjoint (f-j* (conjoint x v))))) x)) 1))))))

(define (hessian-quadratic-form-using-*j-*j f x u v)
 (let ((f-*j (*j f)))
  (dot u
       (ungenericize
	x
	(cdr ((cdr ((*j (lambda (x)
			 (dot (ungenericize x (cdr ((cdr (f-*j x)) 1))) v)))
		    x))
	      1))))))

(define (hessian-quadratic-form f x v)
 (hessian-quadratic-form-using-j*-j* f x v))

(define (alternate-hessian-quadratic-form f x u v)
 (dot u (m*v ((hessian f) x) v)))

(define (f x)
 (+ (* 2 (sqr (list-ref x 0)))
    (+ (* 3 (* (list-ref x 0) (list-ref x 1)))
       (* 4 (sqr (list-ref x 1))))))

((hessian f) '(3 4))

(alternate-hessian-quadratic-form f '(3 4) '(7 8) '(9 10))

(hessian-quadratic-form-using-j*-j* f '(3 4) '(7 8) '(9 10))

(hessian-quadratic-form-using-j*-*j f '(3 4) '(7 8) '(9 10))

(hessian-quadratic-form-using-*j-j* f '(3 4) '(7 8) '(9 10))

(hessian-quadratic-form-using-*j-*j f '(3 4) '(7 8) '(9 10))
