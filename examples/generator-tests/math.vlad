;;; General stuff

(define (not x) (if x #f #t))

(define (abs x) (if (negative? x) (- (real 0) x) x))

(define (sqr x) (* x x))

(define (identity x) x)

;;; Lists

(define (first x) (car x))

(define (rest x) (cdr x))

(define (append x y) (if (null? x) y (cons (first x) (append (rest x) y))))

(define (length l) (if (null? l) 0 (+ (length (rest l)) 1)))

(define (list-ref l i) (if (zero? i) (first l) (list-ref (rest l) (- i 1))))

;;; Mapping and reduction

(define ((map f) l) (if (null? l) '() (cons (f (first l)) ((map f) (rest l)))))

(define ((map2 f) l1 l2)
 (if (null? l1)
     '()
     (cons (f (first l1) (first l2)) ((map2 f) (rest l1) (rest l2)))))

(define ((map-n f) n)
 (letrec ((loop (lambda (i) (if (= i n) '() (cons (f i) (loop (+ i 1)))))))
  (loop 0)))

(define ((reduce f i) l)
 (if (null? l) i (f (first l) ((reduce f i) (rest l)))))

;;; Vectors

(define (dot u v) ((reduce + (real 0)) ((map2 *) u v)))

(define (v+ u v) ((map2 +) u v))

(define (v- u v) ((map2 -) u v))

(define (k*v k v) ((map (lambda (x) (* k x))) v))

(define (magnitude-squared x) ((reduce + (real 0)) ((map sqr) x)))

(define (magnitude x) (sqrt (magnitude-squared x)))

(define (distance-squared u v) (magnitude-squared (v- v u)))

(define (distance u v) (sqrt (distance-squared u v)))

;;; The ith n-dimensional basis vector.
(define (e i n) ((map-n (lambda (j) (if (= j i) (real 1) (real 0)))) n))

;;; Matrices

(define (matrix-rows a) (length a))

(define (matrix-columns a) (length (list-ref a 0)))

(define (matrix-ref a i j) (list-ref (list-ref a i) j))

(define (matrix-row-ref a i) (list-ref a i))

(define (matrix-column-ref a j) ((map (lambda (v) (list-ref v j))) a))

(define (vector->row-matrix v) (list v))

(define (vector->column-matrix v) ((map (lambda (x) (list x))) v))

(define (m+ a b) ((map2 v+) a b))

(define (m- a b) ((map2 v-) a b))

(define (m*v a v) ((map (lambda (u) (dot u v))) a))

(define (transpose a)
 ((map-n (lambda (j) (matrix-column-ref a j))) (matrix-columns a)))

(define (outer-product f u v)
 ((map (lambda (ui) (map (lambda (vj) (f ui vj)) v))) u))

(define (self-outer-product f v) (outer-product f v v))

(define (m* a b) (outer-product dot a (transpose b)))

(define (v*m v a) (m* (vector->row-matrix v) a))

(define (k*m k m) ((map (lambda (row) (map (lambda (e) (* k e)) row))) m))

(define (identity-matrix n) ((map-n (lambda (i) (e i n))) n))

;;; Derivatives

(define ((derivative f) x) (tangent ((j* f) (bundle x (real 1)))))

(define ((gradient f) x)
 (let ((n (length x)))
  ((map-n (lambda (i) (tangent ((j* f) (bundle x (e i n)))))) n)))
