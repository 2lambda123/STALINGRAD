(define (cdr (cons x y)) y)

(define (j* x) (bundle x (perturb (zero x))))

(define (derivative-using-j* f)
 (let ((f-forward (j* f)))
  (lambda (x) (unperturb (tangent (f-forward (bundle x (perturb 1))))))))

(define (derivative-using-*j f)
 (let ((f-reverse (*j f)))
  (lambda (x) (cdr (unsensitize ((cdr (f-reverse (*j x))) (sensitize 1)))))))

(define (bug x) (letrec ((g (lambda (y) x)) (f (lambda (y) (g 0)))) (f 0)))

(*j bug)

(bug 4) ===> 4

((derivative-using-j* bug) 4) ===> 1

((derivative-using-*j bug) 4) ===> 1
