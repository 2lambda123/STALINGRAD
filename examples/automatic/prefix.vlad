(include "math")

(define (jacobian-using-j* f)
 (let ((f-forward (j* f)))
  (lambda (x)
   (let ((n (length x)))
    (map-n (lambda (i)
	    (unperturb (tangent (f-forward (bundle x (perturb (e i n)))))))
	   n)))))

(define (jacobian-using-*j f)
 (let ((f-reverse (*j f)))
  (lambda (x)
   (let ((n (length x)) (y-tilde (cdr (f-reverse (*j x)))))
    (transpose
     (map-n (lambda (i) (cdr (unsensitize (y-tilde (sensitize (e i n))))))
	    n))))))

(define (jacobian f) (jacobian-using-j* f))

(define (j-transpose*v f)
 (let ((f-reverse (*j f)))
  (lambda (x y-grave)
   (cdr (unsensitize ((cdr (f-reverse (*j x))) (sensitize y-grave)))))))

(define (prefix l)
 (letrec ((loop (lambda (a l)
		 (if (null? l)
		     '()
		     (let ((a (+ a (first l)))) (cons a (loop a (rest l))))))))
  (loop 0 l)))

((jacobian-using-j* prefix) '(0 1 2 3 4)) ===> ((1 1 1 1 1) (0 1 1 1 1) (0 0 1 1 1) (0 0 0 1 1) (0 0 0 0 1))
((jacobian-using-*j prefix) '(0 1 2 3 4)) ===> ((1 1 1 1 1) (0 1 1 1 1) (0 0 1 1 1) (0 0 0 1 1) (0 0 0 0 1))
((j-transpose*v prefix) '(0 1 2 3 4) '(0 0 0 0 1)) ===> (1 1 1 1 1)
