5.0 ===> 5.0
(+ 1 2) ===> 3
(- 1 2) ===> -1
; (- 1)
(* 1 2) ===> 2
(/ 1 2) ===> 0.5
(sqrt 2) ===> 1.414213562373095
(exp 1) ===> 2.718281828459045
(= 1 1)
(< 1 2)
(zero? 4) ===> #f
(zero? 0)
(positive? -1) ===> #f
(positive? 1)
(negative? 2) ===> #f
(negative? -1)
(sin 3) ===> .1411200080598672
(cos 3) ===> -.9899924966004454
(log 2) ===> .6931471805599453
(atan 2 3) ===> .5880026035475675
(real? 4)
(real? 2.073e-2)


(multiform
 (define (abs x) (if (negative? x) (- 0 x) x))
 (abs -3))
===> 3

(let ((ignore (write-real (* 2 (real 3)))))
  3) ===> (multiform 6 3)

(perturb 1) ===> (perturbation 1)
(write (perturb 1)) ===> (multiform (perturbation 1) (perturbation 1))
(perturbation? (perturb 1))
(perturbation? 1) ===> #f
(bundle 1 (perturb 1)) ===> (forward 1 (perturbation 1))
(forward? (bundle 1 (perturb 1)))
(forward? 1) ===> #f
(forward? (perturb 1)) ===> #f
(unperturb (perturb 1)) ===> 1
(primal (bundle 1 (perturb 1))) ===> 1
(tangent (bundle 1 (perturb 1))) ===> (perturbation 1)
(perturb (cons 1 2)) ===> (perturbation (1 . 2))
(perturb #t) ===> (perturbation #t)
(bundle (cons 1 2) (perturb (cons 3 4))) ===> (forward (1 . 2) (perturbation (3 . 4)))
(*j 1) ===> (reverse 1)

(multiform
 (define (car (cons x y)) x)
 (define (cdr (cons x y)) y)
 (reverse? (car ((*j sin) (*j 1))))
 (procedure? (cdr ((*j sin) (*j 1))))
 (sensitivity? ((cdr ((*j sin) (*j 1))) (sensitize 1)))
 (cdr (unsensitize ((cdr ((*j sin) (*j 1))) (sensitize 1)))))
===> (multiform #t #t #t 0.5403023058681398)

(reverse? (*j sin))
(plus (cons 1 2) (cons 2 3)) ===> (3 . 5)

;; (define (double-loop)
;;   (let* ((x (read-real))
;;          (y (write (* 3 x))))
;;     (double-loop)))

;; (double-loop)

'() ===> ()
() ===> (or (error "Invalid expression: ()") ())

(multiform
 (define x 3)
 x) ===> (or (error "Invalid expression") 3)

(let ((x 3)
      (x 4))
  x) ===> (error "Duplicate variables")

(let* ((x 3)
       (x 4))
  x) ===> 4

(letrec ((x 3)
	 (x 4))
  x) ===> (error "Duplicate variables")

(multiform
 (define x (lambda () 3))
 (x)) ===> 3

(letrec ((foo (cons (lambda () 2)
		    (lambda () 3))))
  foo) ===> (error "Invalid expression")

`(3) ===> (error "Unbound variable: QUASIQUOTE")

#b100 ===> 4
#o100 ===> 64
#d100 ===> 100
#x100 ===> 256

(- (real 3) -1) ===> 4

(write (cons 1 2)) ===> (multiform (1 . 2) (1 . 2))

(exact-string
 "#;(write 3) 2")
===> (or (error "READ Invalid # option: ;") 2)

(exact-string
 "#|(write 3)|# 2")
===> (or (error "READ Invalid # option: |") 2)

((lambda ((cons x y)) (+ x y))
 (cons 1 2)) ===> 3

(let (((cons x y) (cons 1 2)))
  (+ x y)) ===> 3

((lambda ((list x y z))
   (* x (* y z)))
 (list 2 3 4)) ===> 24

((lambda ((cons x y) (list z (cons v w)))
   (+ x (+ y (+ z (+ v w)))))
 (cons (cons 1 2) (list 3 (cons 4 5))))  ===>  15

(let (((cons (cons x y) (list z (cons v w)))
       (cons (cons 1 2) (list 3 (cons 4 5)))))
  (+ x (+ y (+ z (+ v w)))))  ===>  15

(read-real) ===> (with-inputs (5) 5)
(sqrt (read-real)) ===> (with-inputs (2) 1.41421356237309515)
(+ (read-real) (read-real)) ===> (with-inputs (3 4) 7)
(+ (read-real) 3) ===> (with-inputs (4) 7)
(+ (read-real) 3.0) ===> (with-inputs (4) 7)

(write-real (+ (cons 3 4))) ===> (multiform 7 7)
(write-real (real (+ (cons 3 4)))) ===> (multiform 7 7)

(if (null? '())
    (sin (read-real))
    (cos (read-real)))
===> (with-inputs (0) 0)

(if 1
    (sin (read-real))
    (cos (read-real)))
===> (with-inputs (0) 0)

(if (null? 0)
    (sin (read-real))
    (cos (read-real)))
===> (with-inputs (0) 1)

(if (= (read-real) (read-real))
    (sin (read-real))
    (cos (read-real)))
===> (with-inputs (3 4 0) 1)

(letrec ((f (lambda (x)
	      (if (zero? x)
		  x
		  (f (- x 1.0))))))
  (f (read-real)))  ===> (with-inputs (5) 0)

(let ((y (read-real)))
  (letrec ((f (lambda (x)
		(if (zero? x)
		    y
		    (f (- x 1.0))))))
    (f (read-real)))) ===> (with-inputs (3 4) 3)

(multiform
 (include "math")
 (dot (list (read-real) (read-real)) (list (read-real) (read-real))))
===> (with-inputs (3 4 5 6) 39)

(multiform
 (include "math")
 ((derivative sqr) (read-real)))
===> (with-inputs (7) 14)

;;; TODO This one is too slow when compiled for the fast test suite
;; (multiform
;;  (include "math")
;;  ((derivative (derivative sqr)) (read-real)))
;; ===> (with-inputs (7) 2)

;; TODO What are examples/generator-tests/t16 and t17 supposed to test?

(multiform
 (include "math")
 ((derivative-using-*j sqr) (read-real)))
===> (with-inputs (7) 14)

(multiform
 (include "math")
 (let (((cons x y)
	((gradient (lambda (x y) (+ (* x x) (* x y))))
	 (read-real) (read-real))))
   (list (write-real x) (write-real y))))
===> (with-inputs (3 4) (multiform 10 3 (10 3)))

(multiform
 (define (car (cons x y)) x)
 (define (cdr (cons x y)) y)
 (define (sum l) (if (null? l) 0.0 (+ (car l) (sum (cdr l)))))
 (define (f l) (sum l))
 (car
  (cdr
   (unsensitize ((cdr ((*j f) (*j (list (read-real))))) (sensitize 1.0))))))
===> (with-inputs (3) 1)

;;; TODO This one needs -widen-lists to run
;; (multiform
;;  (define (first (cons x y)) x)
;;  (define (rest (cons x y)) y)
;;  (define (enumerate n) (if (zero? n) '() (cons n (enumerate (- n 1)))))
;;  (define (length n) (if (null? n) 0 (+ (length (rest n)) 1)))
;;  (length (enumerate (read-real))))
;; ===> (with-inputs (4) 4)

(multiform
 (include "math")
 ((j* (j* sqrt))
  (bundle (bundle 4 (perturb 1)) (perturb (bundle 1 (perturb 0))))))
===> (forward (forward 2 (perturbation 0.25)) (perturbation (forward 0.25 (perturbation -0.03125))))
