(include "j")

(define (identity x) x)

(define (single0 f x)
 (let ((g (conjoint-j* f)))
  (cdr (g x 1))))

(define (single1 f x)
 (let ((g (conjoint-*j f)))
  ((cdr (g x identity)) 1)))

(define (single2 f x)
 (let ((g (conjoined-j* f)))
  (cdr (g x 1))))

(define (single3 f x)
 (let ((g (conjoined-*j f)))
  ((cdr (g x identity)) 1)))

(define (single f x)
 (list (single0 f x) (single1 f x) (single2 f x) (single3 f x)))

(define (double00 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoint-j* (lambda (x) (cdr (g x 1))))))
  (cdr (h x 1))))

(define (double01 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoint-*j (lambda (x) (cdr (g x 1))))))
  ((cdr (h x identity)) 1)))

(define (double02 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoined-j* (lambda (x) (cdr (g x 1))))))
  (cdr (h x 1))))

(define (double03 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoined-*j (lambda (x) (cdr (g x 1))))))
  ((cdr (h x identity)) 1)))

(define (double10 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoint-j* (lambda (x) ((cdr (g x identity)) 1)))))
  (cdr (h x 1))))

(define (double11 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoint-*j (lambda (x) ((cdr (g x identity)) 1)))))
  ((cdr (h x identity)) 1)))

(define (double12 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoined-j* (lambda (x) ((cdr (g x identity)) 1)))))
  (cdr (h x 1))))

(define (double13 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoined-*j (lambda (x) ((cdr (g x identity)) 1)))))
  ((cdr (h x identity)) 1)))

(define (double20 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoint-j* (lambda (x) (cdr (g x 1))))))
  (cdr (h x 1))))

(define (double21 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoint-*j (lambda (x) (cdr (g x 1))))))
  ((cdr (h x identity)) 1)))

(define (double22 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoined-j* (lambda (x) (cdr (g x 1))))))
  (cdr (h x 1))))

(define (double23 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoined-*j (lambda (x) (cdr (g x 1))))))
  ((cdr (h x identity)) 1)))

(define (double30 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoint-j* (lambda (x) ((cdr (g x identity)) 1)))))
  (cdr (h x 1))))

(define (double31 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoint-*j (lambda (x) ((cdr (g x identity)) 1)))))
  ((cdr (h x identity)) 1)))

(define (double32 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoined-j* (lambda (x) ((cdr (g x identity)) 1)))))
  (cdr (h x 1))))

(define (double33 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoined-*j (lambda (x) ((cdr (g x identity)) 1)))))
  ((cdr (h x identity)) 1)))

(define (double f x)
 (list (list (double00 f x) (double01 f x) (double02 f x) (double03 f x))
       (list (double10 f x) (double11 f x) (double12 f x) (double13 f x))
       (list (double20 f x) (double21 f x) (double22 f x) (double23 f x))
       (list (double30 f x) (double31 f x) (double32 f x) (double33 f x))))

(define (triple000 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoint-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoint-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple001 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoint-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoint-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple002 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoint-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoined-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple003 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoint-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoined-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple010 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoint-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoint-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple011 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoint-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoint-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple012 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoint-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoined-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple013 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoint-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoined-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple020 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoined-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoint-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple021 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoined-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoint-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple022 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoined-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoined-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple023 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoined-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoined-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple030 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoined-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoint-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple031 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoined-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoint-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple032 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoined-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoined-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple033 f x)
 (let* ((g (conjoint-j* f))
	(h (conjoined-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoined-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple100 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoint-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple101 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoint-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple102 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoint-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple103 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoint-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple110 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoint-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple111 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoint-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple112 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoint-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple113 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoint-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple120 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoined-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple121 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoined-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple122 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoined-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple123 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoined-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple130 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoined-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple131 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoined-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple132 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoined-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple133 f x)
 (let* ((g (conjoint-*j f))
	(h (conjoined-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple200 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoint-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoint-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple201 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoint-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoint-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple202 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoint-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoined-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple203 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoint-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoined-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple210 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoint-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoint-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple211 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoint-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoint-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple212 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoint-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoined-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple213 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoint-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoined-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple220 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoined-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoint-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple221 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoined-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoint-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple222 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoined-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoined-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple223 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoined-j* (lambda (x) (cdr (g x 1)))))
	(p (conjoined-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple230 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoined-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoint-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple231 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoined-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoint-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple232 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoined-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoined-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple233 f x)
 (let* ((g (conjoined-j* f))
	(h (conjoined-*j (lambda (x) (cdr (g x 1)))))
	(p (conjoined-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple300 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoint-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple301 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoint-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple302 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoint-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple303 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoint-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple310 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoint-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple311 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoint-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple312 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoint-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple313 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoint-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple320 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoined-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple321 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoined-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple322 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoined-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-j* (lambda (x) (cdr (h x 1))))))
  (cdr (p x 1))))

(define (triple323 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoined-j* (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-*j (lambda (x) (cdr (h x 1))))))
  ((cdr (p x identity)) 1)))

(define (triple330 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoined-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple331 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoined-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoint-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple332 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoined-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-j* (lambda (x) ((cdr (h x identity)) 1)))))
  (cdr (p x 1))))

(define (triple333 f x)
 (let* ((g (conjoined-*j f))
	(h (conjoined-*j (lambda (x) ((cdr (g x identity)) 1))))
	(p (conjoined-*j (lambda (x) ((cdr (h x identity)) 1)))))
  ((cdr (p x identity)) 1)))

(define (triple f x)
 (list
  (list
   (list (triple000 f x) (triple001 f x) (triple002 f x) (triple003 f x))
   (list (triple010 f x) (triple011 f x) (triple012 f x) (triple013 f x))
   (list (triple020 f x) (triple021 f x) (triple022 f x) (triple023 f x))
   (list (triple030 f x) (triple031 f x) (triple032 f x) (triple033 f x)))
  (list
   (list (triple100 f x) (triple101 f x) (triple102 f x) (triple103 f x))
   (list (triple110 f x) (triple111 f x) (triple112 f x) (triple113 f x))
   (list (triple120 f x) (triple121 f x) (triple122 f x) (triple123 f x))
   (list (triple130 f x) (triple131 f x) (triple132 f x) (triple133 f x)))
  (list
   (list (triple200 f x) (triple201 f x) (triple202 f x) (triple203 f x))
   (list (triple210 f x) (triple211 f x) (triple212 f x) (triple213 f x))
   (list (triple220 f x) (triple221 f x) (triple222 f x) (triple223 f x))
   (list (triple230 f x) (triple231 f x) (triple232 f x) (triple233 f x)))
  (list
   (list (triple300 f x) (triple301 f x) (triple302 f x) (triple303 f x))
   (list (triple310 f x) (triple311 f x) (triple312 f x) (triple313 f x))
   (list (triple320 f x) (triple321 f x) (triple322 f x) (triple323 f x))
   (list (triple330 f x) (triple331 f x) (triple332 f x) (triple333 f x)))))

(define (all-three f x) (list (single f x) (double f x) (triple f x)))

;;;(list (all-three sqrt 4)
;;;      (all-three (lambda (x) (+ x x)) 4)
;;;      (all-three (lambda (x) (car (cons x x))) 4))

(single0 sqrt 4)
(single1 sqrt 4)
(single2 sqrt 4)
(single3 sqrt 4)
(single0 (lambda (x) (+ x x)) 4)
(single1 (lambda (x) (+ x x)) 4)
(single2 (lambda (x) (+ x x)) 4)
(single3 (lambda (x) (+ x x)) 4)
(single0 (lambda (x) (car (cons x x))) 4)
(single1 (lambda (x) (car (cons x x))) 4)
(single2 (lambda (x) (car (cons x x))) 4)
(single3 (lambda (x) (car (cons x x))) 4)

(double00 sqrt 4)
(double01 sqrt 4)
(double02 sqrt 4)
(double03 sqrt 4)
(double10 sqrt 4)
(double11 sqrt 4)
(double12 sqrt 4)
(double13 sqrt 4)
(double20 sqrt 4)
(double21 sqrt 4)
(double22 sqrt 4)
(double23 sqrt 4)
(double30 sqrt 4)
(double31 sqrt 4)
(double32 sqrt 4)
(double33 sqrt 4)
(double00 (lambda (x) (+ x x)) 4)
(double01 (lambda (x) (+ x x)) 4)
(double02 (lambda (x) (+ x x)) 4)
(double03 (lambda (x) (+ x x)) 4)
(double10 (lambda (x) (+ x x)) 4)
(double11 (lambda (x) (+ x x)) 4)
(double12 (lambda (x) (+ x x)) 4)
(double13 (lambda (x) (+ x x)) 4)
(double20 (lambda (x) (+ x x)) 4)
(double21 (lambda (x) (+ x x)) 4)
(double22 (lambda (x) (+ x x)) 4)
(double23 (lambda (x) (+ x x)) 4)
(double30 (lambda (x) (+ x x)) 4)
(double31 (lambda (x) (+ x x)) 4)
(double32 (lambda (x) (+ x x)) 4)
(double33 (lambda (x) (+ x x)) 4)
(double00 (lambda (x) (car (cons x x))) 4)
(double01 (lambda (x) (car (cons x x))) 4)
(double02 (lambda (x) (car (cons x x))) 4)
(double03 (lambda (x) (car (cons x x))) 4)
(double10 (lambda (x) (car (cons x x))) 4)
(double11 (lambda (x) (car (cons x x))) 4)
(double12 (lambda (x) (car (cons x x))) 4)
(double13 (lambda (x) (car (cons x x))) 4)
(double20 (lambda (x) (car (cons x x))) 4)
(double21 (lambda (x) (car (cons x x))) 4)
(double22 (lambda (x) (car (cons x x))) 4)
(double23 (lambda (x) (car (cons x x))) 4)
(double30 (lambda (x) (car (cons x x))) 4)
(double31 (lambda (x) (car (cons x x))) 4)
(double32 (lambda (x) (car (cons x x))) 4)
(double33 (lambda (x) (car (cons x x))) 4)

(triple000 sqrt 4)
(triple001 sqrt 4)
(triple002 sqrt 4)
(triple003 sqrt 4)
(triple010 sqrt 4)
(triple011 sqrt 4)
(triple012 sqrt 4)
(triple013 sqrt 4)
(triple020 sqrt 4)
(triple021 sqrt 4)
(triple022 sqrt 4)
(triple023 sqrt 4)
(triple030 sqrt 4)
(triple031 sqrt 4)
(triple032 sqrt 4)
(triple033 sqrt 4)
(triple100 sqrt 4)
(triple101 sqrt 4)
(triple102 sqrt 4)
(triple103 sqrt 4)
(triple110 sqrt 4)
(triple111 sqrt 4)
(triple112 sqrt 4)
(triple113 sqrt 4)
(triple120 sqrt 4)
(triple121 sqrt 4)
(triple122 sqrt 4)
(triple123 sqrt 4)
(triple130 sqrt 4)
(triple131 sqrt 4)
(triple132 sqrt 4)
(triple133 sqrt 4)
(triple200 sqrt 4)
(triple201 sqrt 4)
(triple202 sqrt 4)
(triple203 sqrt 4)
(triple210 sqrt 4)
(triple211 sqrt 4)
(triple212 sqrt 4)
(triple213 sqrt 4)
(triple220 sqrt 4)
(triple221 sqrt 4)
(triple222 sqrt 4)
(triple223 sqrt 4)
(triple230 sqrt 4)
(triple231 sqrt 4)
(triple232 sqrt 4)
(triple233 sqrt 4)
(triple300 sqrt 4)
(triple301 sqrt 4)
(triple302 sqrt 4)
(triple303 sqrt 4)
(triple310 sqrt 4)
(triple311 sqrt 4)
(triple312 sqrt 4)
(triple313 sqrt 4)
(triple320 sqrt 4)
(triple321 sqrt 4)
(triple322 sqrt 4)
(triple323 sqrt 4)
(triple330 sqrt 4)
(triple331 sqrt 4)
(triple332 sqrt 4)
(triple333 sqrt 4)

(triple000 (lambda (x) (+ x x)) 4)
(triple001 (lambda (x) (+ x x)) 4)
(triple002 (lambda (x) (+ x x)) 4)
(triple003 (lambda (x) (+ x x)) 4)
(triple010 (lambda (x) (+ x x)) 4)
(triple011 (lambda (x) (+ x x)) 4)
(triple012 (lambda (x) (+ x x)) 4)
(triple013 (lambda (x) (+ x x)) 4)
(triple020 (lambda (x) (+ x x)) 4)
(triple021 (lambda (x) (+ x x)) 4)
(triple022 (lambda (x) (+ x x)) 4)
(triple023 (lambda (x) (+ x x)) 4)
(triple030 (lambda (x) (+ x x)) 4)
(triple031 (lambda (x) (+ x x)) 4)
;;;(triple032 (lambda (x) (+ x x)) 4)
;;;(triple033 (lambda (x) (+ x x)) 4)
(triple100 (lambda (x) (+ x x)) 4)
(triple101 (lambda (x) (+ x x)) 4)
(triple102 (lambda (x) (+ x x)) 4)
(triple103 (lambda (x) (+ x x)) 4)
(triple110 (lambda (x) (+ x x)) 4)
(triple111 (lambda (x) (+ x x)) 4)
(triple112 (lambda (x) (+ x x)) 4)
(triple113 (lambda (x) (+ x x)) 4)
(triple120 (lambda (x) (+ x x)) 4)
(triple121 (lambda (x) (+ x x)) 4)
(triple122 (lambda (x) (+ x x)) 4)
(triple123 (lambda (x) (+ x x)) 4)
(triple130 (lambda (x) (+ x x)) 4)
(triple131 (lambda (x) (+ x x)) 4)
(triple132 (lambda (x) (+ x x)) 4)
;;;(triple133 (lambda (x) (+ x x)) 4)
(triple200 (lambda (x) (+ x x)) 4)
(triple201 (lambda (x) (+ x x)) 4)
(triple202 (lambda (x) (+ x x)) 4)
(triple203 (lambda (x) (+ x x)) 4)
(triple210 (lambda (x) (+ x x)) 4)
(triple211 (lambda (x) (+ x x)) 4)
(triple212 (lambda (x) (+ x x)) 4)
(triple213 (lambda (x) (+ x x)) 4)
(triple220 (lambda (x) (+ x x)) 4)
(triple221 (lambda (x) (+ x x)) 4)
(triple222 (lambda (x) (+ x x)) 4)
(triple223 (lambda (x) (+ x x)) 4)
(triple230 (lambda (x) (+ x x)) 4)
(triple231 (lambda (x) (+ x x)) 4)
;;;(triple232 (lambda (x) (+ x x)) 4)
;;;(triple233 (lambda (x) (+ x x)) 4)
(triple300 (lambda (x) (+ x x)) 4)
(triple301 (lambda (x) (+ x x)) 4)
(triple302 (lambda (x) (+ x x)) 4)
(triple303 (lambda (x) (+ x x)) 4)
(triple310 (lambda (x) (+ x x)) 4)
(triple311 (lambda (x) (+ x x)) 4)
(triple312 (lambda (x) (+ x x)) 4)
(triple313 (lambda (x) (+ x x)) 4)
(triple320 (lambda (x) (+ x x)) 4)
(triple321 (lambda (x) (+ x x)) 4)
(triple322 (lambda (x) (+ x x)) 4)
(triple323 (lambda (x) (+ x x)) 4)
(triple330 (lambda (x) (+ x x)) 4)
(triple331 (lambda (x) (+ x x)) 4)
(triple332 (lambda (x) (+ x x)) 4)
;;;(triple333 (lambda (x) (+ x x)) 4)

(triple000 (lambda (x) (car (cons x x))) 4)
(triple001 (lambda (x) (car (cons x x))) 4)
(triple002 (lambda (x) (car (cons x x))) 4)
(triple003 (lambda (x) (car (cons x x))) 4)
(triple010 (lambda (x) (car (cons x x))) 4)
(triple011 (lambda (x) (car (cons x x))) 4)
(triple012 (lambda (x) (car (cons x x))) 4)
(triple013 (lambda (x) (car (cons x x))) 4)
(triple020 (lambda (x) (car (cons x x))) 4)
(triple021 (lambda (x) (car (cons x x))) 4)
(triple022 (lambda (x) (car (cons x x))) 4)
(triple023 (lambda (x) (car (cons x x))) 4)
(triple030 (lambda (x) (car (cons x x))) 4)
(triple031 (lambda (x) (car (cons x x))) 4)
;;;(triple032 (lambda (x) (car (cons x x))) 4)
;;;(triple033 (lambda (x) (car (cons x x))) 4)
(triple100 (lambda (x) (car (cons x x))) 4)
(triple101 (lambda (x) (car (cons x x))) 4)
(triple102 (lambda (x) (car (cons x x))) 4)
(triple103 (lambda (x) (car (cons x x))) 4)
(triple110 (lambda (x) (car (cons x x))) 4)
(triple111 (lambda (x) (car (cons x x))) 4)
(triple112 (lambda (x) (car (cons x x))) 4)
(triple113 (lambda (x) (car (cons x x))) 4)
(triple120 (lambda (x) (car (cons x x))) 4)
(triple121 (lambda (x) (car (cons x x))) 4)
(triple122 (lambda (x) (car (cons x x))) 4)
(triple123 (lambda (x) (car (cons x x))) 4)
(triple130 (lambda (x) (car (cons x x))) 4)
(triple131 (lambda (x) (car (cons x x))) 4)
(triple132 (lambda (x) (car (cons x x))) 4)
(triple133 (lambda (x) (car (cons x x))) 4)
(triple200 (lambda (x) (car (cons x x))) 4)
(triple201 (lambda (x) (car (cons x x))) 4)
(triple202 (lambda (x) (car (cons x x))) 4)
(triple203 (lambda (x) (car (cons x x))) 4)
(triple210 (lambda (x) (car (cons x x))) 4)
(triple211 (lambda (x) (car (cons x x))) 4)
(triple212 (lambda (x) (car (cons x x))) 4)
(triple213 (lambda (x) (car (cons x x))) 4)
(triple220 (lambda (x) (car (cons x x))) 4)
(triple221 (lambda (x) (car (cons x x))) 4)
(triple222 (lambda (x) (car (cons x x))) 4)
(triple223 (lambda (x) (car (cons x x))) 4)
(triple230 (lambda (x) (car (cons x x))) 4)
(triple231 (lambda (x) (car (cons x x))) 4)
;;;(triple232 (lambda (x) (car (cons x x))) 4)
;;;(triple233 (lambda (x) (car (cons x x))) 4)
(triple300 (lambda (x) (car (cons x x))) 4)
(triple301 (lambda (x) (car (cons x x))) 4)
(triple302 (lambda (x) (car (cons x x))) 4)
(triple303 (lambda (x) (car (cons x x))) 4)
(triple310 (lambda (x) (car (cons x x))) 4)
(triple311 (lambda (x) (car (cons x x))) 4)
(triple312 (lambda (x) (car (cons x x))) 4)
(triple313 (lambda (x) (car (cons x x))) 4)
(triple320 (lambda (x) (car (cons x x))) 4)
(triple321 (lambda (x) (car (cons x x))) 4)
(triple322 (lambda (x) (car (cons x x))) 4)
(triple323 (lambda (x) (car (cons x x))) 4)
(triple330 (lambda (x) (car (cons x x))) 4)
(triple331 (lambda (x) (car (cons x x))) 4)
(triple332 (lambda (x) (car (cons x x))) 4)
(triple333 (lambda (x) (car (cons x x))) 4)
