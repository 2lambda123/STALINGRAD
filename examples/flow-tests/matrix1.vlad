;;; Lists

(define (first x) (car x))

(define (rest x) (cdr x))

;;; Mapping and reduction

(define (map f l) (if (null? l) '() (cons (f (first l)) (map f (rest l)))))

(define (map2 f l1 l2)
 (if (null? l1)
     '()
     (cons (f (first l1) (first l2)) (map2 f (rest l1) (rest l2)))))

(define ((reduce f i) l)
 (if (null? l) i (f (first l) ((reduce f i) (rest l)))))

;;; Vectors

(define (dot u v) ((reduce + 0) (map2 * u v)))

;;; Matrices

(define (m*v a v) (map (lambda (u) (dot u v)) a))

(let* ((a (list (list 4 2) (list -2 1)))
       (v (list 3 3)))
 (m*v a v))
