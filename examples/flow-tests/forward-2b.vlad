(define (abs x) (if (negative? x) (- 0 x) x))

(define (derivative-using-j* f)
 (let ((f-forward (j* f))) (lambda (x) (tangent (f-forward (bundle x 1))))))

(define (nr-sqrt x)
 (letrec ((loop (lambda (y)
		 (let ((y-prime (- y (/ (- (* y y) x) (+ y y)))))
		  (if (<= (abs (- y y-prime)) 1e-5)
		      y
		      (loop y-prime))))))
  (loop 1)))

(nr-sqrt 4)
