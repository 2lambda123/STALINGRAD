;;; (include "math")

(define (append x y) (if (null? x) y (cons (car x) (append (cdr x) y))))

(define (length l) (if (null? l) 0 (+ (length (cdr l)) 1)))

(define (map-n f n)
 (if (zero? n) '() (append (map-n f (- n 1)) (list (f (- n 1))))))

;;; An n-dimensional vector with x in position i and zeros elsewhere.
(define (ex x i n)
 (if (zero? n) '() (cons (if (zero? i) x 0) (ex x (- i 1) (- n 1)))))

;;; The ith n-dimensional basis vector.
(define (e i n) (ex 1 i n))

(define (jacobian-using-j* f)
 (let ((f-forward (j* f)))
  (lambda (x)
   (let ((n (length x)))
    (map-n (lambda (i) (tangent (f-forward (bundle x (e i n))))) n)))))

(define (prefix l)
 (letrec ((loop (lambda (a l)
		 (if (null? l)
		     '()
		     (let ((a (+ a (car l)))) (cons a (loop a (cdr l))))))))
  (loop 0 l)))

((jacobian-using-j* prefix) '(0 1 2 3 4))
