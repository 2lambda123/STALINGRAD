;;; -*- Scheme -*-

;;; Arithmetic

(define (negate x) (- 0 x))

;;; Lists

(define (first x) (car x))

(define (rest x) (cdr x))

(define (append x y) (if (null? x) y (cons (first x) (append (rest x) y))))

(define (length l) (if (null? l) 0 (+ (length (rest l)) 1)))

(define (list-ref l i) (if (zero? i) (first l) (list-ref (rest l) (- i 1))))

;;; Mapping and reduction

(define (map f l) (if (null? l) '() (cons (f (first l)) (map f (rest l)))))

(define (map2 f l1 l2)
 (if (null? l1)
     '()
     (cons (f (first l1) (first l2)) (map2 f (rest l1) (rest l2)))))

(define (map-n f n)
 (if (zero? n) '() (append (map-n f (- n 1)) (list (f (- n 1))))))

(define ((reduce f i) l)
 (if (null? l) i (f (first l) ((reduce f i) (rest l)))))

;;; Vectors

(define (dot u v) ((reduce + 0) (map2 * u v)))

;;; Matrices

(define (matrix-columns a) (length (list-ref a 0)))

(define (matrix-ref a i j) (list-ref (list-ref a i) j))

(define (matrix-column-ref a j) (map (lambda (v) (list-ref v j)) a))

(define (m*v a v) (map (lambda (u) (dot u v)) a))

(define (transpose a)
 (map-n (lambda (j) (matrix-column-ref a j)) (matrix-columns a)))

(define (k*m k m) (map (lambda (row) (map (lambda (e) (* k e)) row)) m))

(define (determinant-2x2 m)
 (- (* (matrix-ref m 0 0) (matrix-ref m 1 1))
    (* (matrix-ref m 0 1) (matrix-ref m 1 0))))

(define (invert-matrix-2x2 m)
 (k*m (/ 1 (determinant-2x2 m))
      (transpose
       (list (list (matrix-ref m 1 1) (negate (matrix-ref m 1 0)))
	     (list (negate (matrix-ref m 0 1)) (matrix-ref m 0 0))))))

(let* ((a (list (list 4 2) (list -2 1)))
       (a-inverse (invert-matrix-2x2 a))
       (v (list 3 3))
       (stuff (write a))
       (stuff (write a-inverse)))
 (m*v a-inverse (m*v a v)))
