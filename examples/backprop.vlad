;;; -*- scheme -*-
;;; CVS version control block - do not edit manually
;;;  $RCSfile$
;;;  $Revision$
;;;  $Date$
;;;  $Source$

(include "math")

;;; Representation for weights:
;;;  list with one element for each layer following the input;
;;;  each such list has one element for each unit in that layer;
;;;  which consists of a bias, followed by the weights for each
;;;  unit in the previous layer.

(define (sum-activities activities ws-unit)
  ((reduce + (car ws-unit))
   (map2 * (cdr ws-unit) activities)))

(define (sum-layer activities ws-layer)
  (map (lambda (ws-unit) (sum-activities activities ws-unit))
       ws-layer))

(define (forward-pass ws-layers in)
  (if (null? ws-layers)
      in
      (forward-pass (cdr ws-layers)
		    (map sigmoid (sum-layer in (car ws-layers))))))

(define (sigmoid x) (/ 1 (+ 1 (exp (- 0 x)))))

;;; error: (define foo 'bar)

(define (xor-ws) '(((-1 2 2) (-6 4 4)) ((-5 10 -10))))

(define (xor-data)
  (map-real '(((0 0) (0))
	      ((0 1) (1))
	      ((1 0) (1))
	      ((1 1) (0)))))

(define (map-real x)
  (cond ((real? x) (real x))
	((pair? x) (cons (map-real (car x))
			 (map-real (cdr x))))
	(else x)))

(define (test-on-dataset ws-layers dataset)
  (map (lambda (in)
	 (forward-pass ws-layers in))
       (map car dataset)))

(define (test-xor)
  (test-on-dataset (xor-ws) (xor-data)))

(define (error-on-dataset ws-layers dataset)
  ((reduce + 0)
   (map (lambda ((list in target))
	  (let ((err (v- (forward-pass ws-layers in) target)))
	    (* 0.5 (dot err err))))
	dataset)))

;;; Should be:
;;;  ((0.08824035437794886)
;;;   (0.7537208761298554)
;;;   (0.7537208761298554)
;;;   (0.01362366627163038))

(test-xor)

;;; Should be:
;;;  0.06463938906595941

(error-on-dataset (xor-ws) (xor-data))

;; (*j (lambda (w) (error-on-dataset w (xor-data))))

;; ((gradient (lambda (w) (error-on-dataset w (xor-data))))
;;  (xor-ws))

;;; test case, zero-dimensional-input one-layer backprop

(define (dataset-0d) '((() (0.8))))

(define (forward-0d w)
  (forward-pass (list (list (list w))) '()))

(forward-0d 0)

(define (error-0d w)
  (error-on-dataset (list (list (list w)))
		    (dataset-0d)))

(error-0d (real 0))

((derivative-using-j* error-0d)
 (real 0))

((derivative-using-*j error-0d)
 (real 0))
