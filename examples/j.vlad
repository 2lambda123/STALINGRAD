(define (equal? x1 x2)
 (((((((((((((equal?-primitive =)
	     null?)
	    boolean?)
	   real?)
	  pair?)
	 car)
	cdr)
       cons-procedure)
      if-procedure)
     (lambda () #t))
    (lambda () #f))
   x1)
  x2))

(define (j* x)
 (cond
  ((null? x) x)
  ((boolean? x) x)
  ((real? x) x)
  ((pair? x) (cons (j* (car x)) (j* (cdr x))))
  ((equal? x +)
   (lambda ((cons x1 x2) (cons x1-acute x2-acute))
    (cons (+ x1 x2) (+ x1-acute x2-acute))))
  ((equal? x -)
   (lambda ((cons x1 x2) (cons x1-acute x2-acute))
    (cons (- x1 x2) (- x1-acute x2-acute))))
  ((equal? x *)
   (lambda ((cons x1 x2) (cons x1-acute x2-acute))
    (cons (* x1 x2) (+ (* x2 x1-acute) (* x1 x2-acute)))))
  ((equal? x /)
   (lambda ((cons x1 x2) (cons x1-acute x2-acute))
    (cons (/ x1 x2) (/ (- (* x2 x1-acute) (* x1 x2-acute)) (* x2 x2)))))
  ((equal? x sqrt)
   (lambda (x x-acute) (cons (sqrt x) (/ x-acute (* 2 (sqrt x))))))
  ((equal? x exp) (lambda (x x-acute) (cons (exp x) (* (exp x) x-acute))))
  ((equal? x log) (lambda (x x-acute) (cons (log x) (/ x-acute x))))
  ((equal? x sin) (lambda (x x-acute) (cons (sin x) (* (cos x) x-acute))))
  ((equal? x cos)
   (lambda (x x-acute) (cons (cos x) (- 0 (* (sin x) x-acute)))))
  ((equal? x atan)
   (lambda ((cons x1 x2) (cons x1-acute x2-acute))
    (cons (atan x2 x1)
	  (/ (- (* x1 x2-acute) (* x2 x1-acute)) (+ (* x1 x1) (* x2 x2))))))
  ((equal? x =)
   ;; needs work: to check that x1-acute and x2-acute are real
   (lambda ((cons x1 x2) (cons x1-acute x2-acute)) (cons (= x1 x2) '())))
  ((equal? x <)
   ;; needs work: to check that x1-acute and x2-acute are real
   (lambda ((cons x1 x2) (cons x1-acute x2-acute)) (cons (< x1 x2) '())))
  ((equal? x >)
   ;; needs work: to check that x1-acute and x2-acute are real
   (lambda ((cons x1 x2) (cons x1-acute x2-acute)) (cons (> x1 x2) '())))
  ((equal? x <=)
   ;; needs work: to check that x1-acute and x2-acute are real
   (lambda ((cons x1 x2) (cons x1-acute x2-acute)) (cons (<= x1 x2) '())))
  ((equal? x >=)
   ;; needs work: to check that x1-acute and x2-acute are real
   (lambda ((cons x1 x2) (cons x1-acute x2-acute)) (cons (>= x1 x2) '())))
  ;; needs work: to check that x-acute is real
  ((equal? x zero?) (lambda (x x-acute) (cons (zero? x) '())))
  ;; needs work: to check that x-acute is real
  ((equal? x positive?) (lambda (x x-acute) (cons (positive? x) '())))
  ;; needs work: to check that x-acute is real
  ((equal? x negative?) (lambda (x x-acute) (cons (negative? x) '())))
  ;; needs work: to check that x-acute is the sensitivity type of x
  ((equal? x null?) (lambda (x x-acute) (cons (null? x) '())))
  ;; needs work: to check that x-acute is the sensitivity type of x
  ((equal? x boolean?) (lambda (x x-acute) (cons (boolean? x) '())))
  ;; needs work: to check that x-acute is the sensitivity type of x
  ((equal? x real?) (lambda (x x-acute) (cons (real? x) '())))
  ;; needs work: to check that x-acute is the sensitivity type of x
  ((equal? x pair?) (lambda (x x-acute) (cons (pair? x) '())))
  ;; needs work: to check that x-acute is the sensitivity type of x
  ((equal? x procedure?) (lambda (x x-acute) (cons (procedure? x) '())))
  ((equal? x car)
   (lambda ((cons x1 x2) (cons x1-acute x2-acute)) (cons x1 x1-acute)))
  ((equal? x cdr)
   (lambda ((cons x1 x2) (cons x1-acute x2-acute)) (cons x2 x2-acute)))
  ((equal? x cons-procedure)
   (lambda (x1 x1-acute)
    (cons (lambda (x2 x2-acute) (cons (cons x1 x2) (cons x1-acute x2-acute)))
	  '())))
  ((equal? x if-procedure)
   ;; needs work: to check that x1-acute is the sensitivity type of x1
   (lambda (x1 x1-acute)
    (cons (lambda (x2) (cons (lambda (x3) (if x1 x2 x3)) '())) '())))
  ((equal? x equal?-primitive) equal?-primitive)
  ((equal? x zero) (lambda (x x-acute) (cons (zero x) (zero x-acute))))
  ((equal? x plus)
   (lambda ((cons x1 x2) (cons x1-acute x2-acute))
    (cons (plus x1 x2) (plus x1-acute x2-acute))))
  ((equal? x map-closure-forward) map-closure-forward)
  ((equal? x map-closure-reverse) map-closure-reverse)
  ((equal? x write) write)
  ((equal? x j*) j*)
  ((equal? x *j) *j)
  (else (map-closure-forward j* x))))

(define (*j x)
 (cond
  ((null? x) x)
  ((boolean? x) x)
  ((real? x) x)
  ((pair? x) (cons (*j (car x)) (*j (cdr x))))
  ((equal? x +)
   (lambda ((cons x1 x2) x-tilde)
    ;; needs work: to check that y-grave is real
    (cons (+ x1 x2) (lambda (y-grave) (x-tilde (cons y-grave y-grave))))))
  ((equal? x -)
   (lambda ((cons x1 x2) x-tilde)
    (cons (- x1 x2)
	  (lambda (y-grave) (x-tilde (cons y-grave (- 0 y-grave)))))))
  ((equal? x *)
   (lambda ((cons x1 x2) x-tilde)
    (cons (* x1 x2)
	  (lambda (y-grave) (x-tilde (cons (* x2 y-grave) (* x1 y-grave)))))))
  ((equal? x /)
   (lambda ((cons x1 x2) x-tilde)
    (cons
     (/ x1 x2)
     (lambda (y-grave)
      (x-tilde (cons (/ y-grave x2) (- 0 (/ (* x1 y-grave) (* x2 x2)))))))))
  ((equal? x sqrt)
   (lambda (x x-tilde)
    (cons (sqrt x) (lambda (y-grave) (x-tilde (/ y-grave (* 2 (sqrt x))))))))
  ((equal? x exp)
   (lambda (x x-tilde)
    (cons (exp x) (lambda (y-grave) (x-tilde (* (exp x) y-grave))))))
  ((equal? x log)
   (lambda (x x-tilde)
    (cons (log x) (lambda (y-grave) (x-tilde (/ y-grave x))))))
  ((equal? x sin)
   (lambda (x x-tilde)
    (cons (sin x) (lambda (y-grave) (x-tilde (* (cos x) y-grave))))))
  ((equal? x cos)
   (lambda (x x-tilde)
    (cons (cos x) (lambda (y-grave) (x-tilde (- 0 (* (sin x) y-grave)))))))
  ((equal? x atan)
   (lambda ((cons x1 x2) x-tilde)
    (cons (atan x2 x1)
	  (lambda (y-grave)
	   (x-tilde (cons (- 0 (/ (* x2 y-grave) (+ (* x1 x1) (* x2 x2))))
			  (/ (* x1 y-grave) (+ (* x1 x1) (* x2 x2)))))))))
  ((equal? x =)
   ;; needs work: to check that y-grave is null
   (lambda (x x-tilde)
    (cons (= (car x) (cdr x)) (lambda (y-grave) (x-tilde (zero x))))))
  ((equal? x <)
   ;; needs work: to check that y-grave is null
   (lambda (x x-tilde)
    (cons (< (car x) (cdr x)) (lambda (y-grave) (x-tilde (zero x))))))
  ((equal? x >)
   ;; needs work: to check that y-grave is null
   (lambda (x x-tilde)
    (cons (> (car x) (cdr x)) (lambda (y-grave) (x-tilde (zero x))))))
  ((equal? x <=)
   (lambda (x x-tilde)
    ;; needs work: to check that y-grave is null
    (cons (<= (car x) (cdr x)) (lambda (y-grave) (x-tilde (zero x))))))
  ((equal? x >=)
   (lambda (x x-tilde)
    ;; needs work: to check that y-grave is null
    (cons (>= (car x) (cdr x)) (lambda (y-grave) (x-tilde (zero x))))))
  ((equal? x zero?)
   ;; needs work: to check that y-grave is null
   (lambda (x x-tilde) (cons (zero? x) (lambda (y-grave) (x-tilde (zero x))))))
  ((equal? x positive?)
   ;; needs work: to check that y-grave is null
   (lambda (x x-tilde)
    (cons (positive? x) (lambda (y-grave) (x-tilde (zero x))))))
  ((equal? x negative?)
   ;; needs work: to check that y-grave is null
   (lambda (x x-tilde)
    (cons (negative? x) (lambda (y-grave) (x-tilde (zero x))))))
  ((equal? x null?)
   ;; needs work: to check that y-grave is null
   (lambda (x x-tilde) (cons (null? x) (lambda (y-grave) (x-tilde (zero x))))))
  ((equal? x boolean?)
   ;; needs work: to check that y-grave is null
   (lambda (x x-tilde)
    (cons (boolean? x) (lambda (y-grave) (x-tilde (zero x))))))
  ((equal? x real?)
   ;; needs work: to check that y-grave is null
   (lambda (x x-tilde) (cons (real? x) (lambda (y-grave) (x-tilde (zero x))))))
  ((equal? x pair?)
   ;; needs work: to check that y-grave is null
   (lambda (x x-tilde)
    (cons (pair? x) (lambda (y-grave) (x-tilde (zero x))))))
  ((equal? x procedure?)
   ;; needs work: to check that y-grave is null
   (lambda (x x-tilde)
    (cons (procedure? x) (lambda (y-grave) (x-tilde (zero x))))))
  ((equal? x car)
   (lambda ((cons x1 x2) x-tilde)
    (cons x1 (lambda (y-grave) (x-tilde (cons y-grave (zero x2)))))))
  ((equal? x cdr)
   (lambda ((cons x1 x2) x-tilde)
    (cons x2 (lambda (y-grave) (x-tilde (cons (zero x1) y-grave))))))
  ((equal? x cons-procedure)
   (lambda (x1 x1-tilde)
    (cons (lambda (x2 x2-tilde)
	   (cons (cons x1 x2)
		 (lambda (y-grave)
		  (plus (x1-tilde (car y-grave)) (x2-tilde (cdr y-grave))))))
	  ;; needs work: to check that y-grave is null
	  (lambda (y-grave) (x1-tilde (zero x1))))))
  ((equal? x if-procedure)
   (lambda (x1 x1-tilde)
    (cons (lambda (x2)
	   (cons (lambda (x3) (if x1 x2 x3))
		 ;; needs work: to check that y-grave is null
		 (lambda (y-grave) ((cdr x2) (zero (car x2))))))
	  ;; needs work: to check that y-grave is null
	  (lambda (y-grave) (x1-tilde (zero x1))))))
  ((equal? x equal?-primitive) equal?-primitive)
  ((equal? x zero)
   ;; needs work: to check that y-grave is the sensitivity type of x
   (lambda (x x-tilde) (cons (zero x) (lambda (y-grave) (x-tilde (zero x))))))
  ((equal? x plus)
   (lambda ((cons x1 x2) x-tilde)
    ;; needs work: to check that y-grave is the sensitivity type of x1
    (cons (plus x1 x2) (lambda (y-grave) (x-tilde (cons y-grave y-grave))))))
  ((equal? x map-closure-forward) map-closure-forward)
  ((equal? x map-closure-reverse) map-closure-reverse)
  ((equal? x write) write)
  ((equal? x j*) j*)
  ((equal? x *j) *j)
  (else (map-closure-reverse *j x))))
