(include "j")

(let* ((derivative-using-*j
	(lambda (f)
	 (let ((f-*j (*j f)))
	  (lambda (x)
	   (car
	    (exit
	     (key x)
	     ((cdr (f-*j
		    cdr
		    x
		    (lambda (x-grave rho) (accumulate (key x) rho x-grave))))
	      1 (add (key x) '() x))))))))
       (single1
	(lambda (f x)
	 ((derivative-using-*j f) x)))
       (double11
	(lambda (f x)
	 ((derivative-using-*j (derivative-using-*j f)) x)))
       (triple111
	(lambda (f x)
	 ((derivative-using-*j (derivative-using-*j (derivative-using-*j f)))
	  x))))
 ;;(single1 sqrt 4)
 ;;(single1 (lambda (x) (+ x x)) 4)
 ;;(single1 (lambda (x) (car (cons x x))) 4)
 ;;(double11 sqrt 4)
 ;; car of () during lookup
 (double11 (lambda (x) (+ x x)) 4)
 ;; car of () during lookup
 ;;(double11 (lambda (x) (car (cons x x))) 4)
 ;; runs out of memory
 ;;(triple111 sqrt 4)
 ;; runs out of memory
 ;;(triple111 (lambda (x) (+ x x)) 4)
 ;; runs out of memory
 ;;(triple111 (lambda (x) (car (cons x x))) 4)
 )
