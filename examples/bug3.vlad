(include "j")

(define (derivative-using-j* f)
 (let ((f-forward (j* f)))
  (lambda (x) (forward-adjoint (f-forward (forward-conjoin x 1))))))

(define (derivative-using-*j f)
 (let ((f-reverse (*j f))) (lambda (x) (cdr ((cdr (f-reverse x)) 1)))))

(define (bug x) (letrec ((f (lambda (y) x))) (f 1)))

(*j bug)

((cdr ((*j bug) 4)) 1)

((derivative-using-*j bug) 4)
