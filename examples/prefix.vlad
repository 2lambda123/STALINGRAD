(include "math")

(define (list-ref l i) (if (zero? i) (first l) (list-ref (rest l) (- i 1))))

(define (transpose a)
 (let ((m (length a)) (n (length (first a))))
  (map-n (lambda (j) (map-n (lambda (i) (list-ref (list-ref a i) j)) m)) n)))

(define (jacobian-using-j* f)
 (let ((f-j* (j* f)))
  (lambda (x)
   (let ((n (length x)))
    (map-n (lambda (i) (cdr (f-j* x (e i n)))) n)))))

(define (jacobian-using-*j f)
 (let ((f-*j (*j f)))
  (lambda (x)
   (let ((n (length x)) (y-tilde (cdr (f-*j x identity))))
    (transpose (map-n (lambda (i) (y-tilde (e i n))) n))))))

(define (jacobian f) (jacobian-using-j* f))

(define (j-transpose*v f)
 (let ((f-*j (*j f))) (lambda (x y-grave) ((cdr (f-*j x identity)) y-grave))))

(define (prefix l)
 (letrec ((loop (lambda (a l)
		 (if (null? l)
		     '()
		     (let ((a (+ a (car l)))) (cons a (loop a (cdr l))))))))
  (loop 0 l)))

((jacobian-using-j* prefix) '(0 1 2 3 4))
((jacobian-using-*j prefix) '(0 1 2 3 4))
((j-transpose*v prefix) '(0 1 2 3 4) '(0 0 0 0 1))
