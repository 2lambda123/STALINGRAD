(include "j")

(define (derivative-using-j* f)
 (let ((f-j* (j* f))) (lambda (x) (cdr (f-j* x 1)))))

(define (derivative-using-*j f)
 (let ((f-*j (*j f))) (lambda (x) (cdr ((cdr (f-*j x)) 1)))))

;;; car of ()

((derivative-using-j*
  (derivative-using-j* (derivative-using-*j (lambda (x) (car (cons x x))))))
 4)
