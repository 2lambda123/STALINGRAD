(define (car (cons x y)) x)

(define (cdr (cons x y)) y)

(define (j* x) (bundle x (perturb (zero x))))

((j* (j* sqrt))
 (bundle (bundle 4 (perturb 1)) (perturb (bundle 1 (perturb 0)))))

;;; The next three are not (yet) fully updated.

(let ((x ((*j (j* sqrt)) (*j (bundle 4 (perturb 1)))))) 
 (list (*j-inverse (car x))
       (cdr ((cdr x) (bundle 1 (perturb 0))))
       (cdr ((cdr x) (bundle 0 (perturb 1))))))

(let ((x ((j* (*j sqrt)) (bundle (*j 4) (perturb (*j 1))))))
 (list (*j-inverse (car (tangent x)))
       (*j-inverse (car (primal x)))
       (cdr ((cdr (primal x)) 1))
       ((j* cdr) (((j* cdr) x) (bundle 1 (perturb 0))))
       ((j* cdr) (((j* cdr) x) (bundle 0 (perturb 1))))))

(let ((x ((*j (*j sqrt)) (*j (*j 4)))))
 (list (*j-inverse (car (*j-inverse (car x))))
       (cdr ((cdr (*j-inverse (car x))) 1))
       (*j-inverse (cdr ((cdr x) (cons (*j 1) (cons 0 (*j '()))))))
       (car (car ((cdr ((car ((*j cdr) (car x))) (*j 1))) (cons '() 1))))
       (cdr ((cdr ((car ((*j cdr) (car x))) (*j 1))) (cons '() 1)))
       (cdr (*j-inverse (car ((car ((*j cdr) (car x))) (*j 1)))))))
